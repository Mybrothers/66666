Overall Design

The project is a web based search engine consisting of 3 parts: user interface, search engine and database.

The database contains spider, indexer where the spider first crawl web pages and then pass the pages to 
indexer. The indexer will first do pre-process on each page's text content including stopword removal and 
stemming. Then each term will be stored in a inverted file which consists of (term ,posting-list) pairs.
Note that a posting list is a list documents which contains this term and the positions of this term is stored
to support the phrase search function. Other information of the page like URL, last modification date will be 
stored in a forward file. After finish indexing all the pages, each page's PageRank score is calculated and will
be used in search engine part.

The search engine receive query from user interface and process the query including stopword removal, stemming 
and phrase detection. Then it will use vector space model to find the most relevant pages in databse. Other rank 
score like PageRank score, title matching are also considered when decide which pages should be retrieve.

The user interface is responsible for interact with users. User can input query through browser and submit the query
to  server and the interface will display all the relevant pages in the browser.




File Structure in database 

In our design, we have included Inverted file, Forward file, URL to ID map, Page content map and Page title map.  

Inverted File: This is a class where contains Page Content Map and Page Title Map. In this class, it provides functions for other component to have access to these two Maps for functioning such as adding values in (addEntry) and Deletions (deleteEntry). Constructing this class is for over controlling two maps so that it simplifies control flow. 

Forward File: This class is designed to store page specific information like title, URL, size and last modification date. It also stores some global statistic information like the tf max of a specific document. It as well contains all the terms a document has to support fast implementation of delete document operation. Relationships between pages are stored in this file since each forward file contains its child page's URLs so we can use the information to access its child pages.

URL and ID Map: The class called UrlToIdMap designed a map that stores URLs of a page with ID matched to each single of them uniquely. This enables us to have a faster access to ID of the page once we have an URL. In this class, method of addEntry is provided for other component of the project to have access to the map, allowing them to add new pairs in. It also enables function that checks whether an URL exists. 

Page Content Map: This map is realized in the Inverted File class. It is designed to make a direct connection between a word on a particular webpage and the wordâ€™s information such as how many times it appears on this page and its position on the page. The information contained related to this word is stored using a linkedlist. We can obtain the detailed information as soon as a word is provided. 

Page Title Map: This map has similar functionality with Page Content Map except it only processes page titles. 




Algorithms used










Installation procedure
















Highlight of features

We implement a user-friendly interface using bootstrap and it can be visited both on PC and mobile phone.
We implement the PageRank algorithm and important pages (contains many useful links) will be favored in the retrieve process.
Our spider works at an exceedingly good speed.








Testing of the functions implemented

We include a log file which record the test of database, search engine









Conclusion: What are the strengths and weaknesses of your systems; what you would have done differently if you could re-implement the whole system; what would be the interesting features to add to your system,


